version: "3.4"

services:
  node:
    image: "node:16"
    user: "node"
    working_dir: /home/node/app
    volumes:
      - ./:/home/node/app
    command: bash -c "npm install && npm run dev"
  # web
  web:
    image: nginx:latest
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    links:
      - php
    ports:
      - "8888:80"
    networks:
      - app_network
  # php
  php:
    build:
      context: .
      target: app_php
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - ./:/var/www/html
    networks:
      - app_network
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    environment:
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-14}
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration


  ###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-14}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    networks:
      - app_network
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  ###> doctrine/doctrine-bundle ###
  db-data:
###< doctrine/doctrine-bundle ###
networks:
  app_network: